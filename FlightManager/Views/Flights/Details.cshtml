@using FlightManager.Data.Models
@model FlightManager.Data.Models.Flight

@{
    ViewData["Title"] = "Flight Details";
    bool isAdmin = User.IsInRole("Admin");
    var businessReserved = Model.Reservations?.Count(r => r.TicketType == TicketType.Business) ?? 0;
    var standardReserved = Model.Reservations?.Count(r => r.TicketType != TicketType.Business) ?? 0;
    var businessAvailable = Model.BusinessClassCapacity - businessReserved;
    var standardAvailable = (Model.PassengerCapacity - Model.BusinessClassCapacity) - standardReserved;
    var businessPercentage = (businessAvailable * 100) / Math.Max(1, Model.BusinessClassCapacity);
    var standardPercentage = (standardAvailable * 100) / Math.Max(1, (Model.PassengerCapacity - Model.BusinessClassCapacity));
    var businessConfirmed = Model.Reservations?.Count(r => r.TicketType == TicketType.Business && r.IsConfirmed) ?? 0;
    var standardConfirmed = Model.Reservations?.Count(r => r.TicketType != TicketType.Business && r.IsConfirmed) ?? 0;
    var duration = Model.ArrivalTime - Model.DepartureTime;
}

<div class="flight-details-container">
    <!-- Flight Header Section -->
    <div class="flight-header">
        <div class="container">
            <div class="flight-route">
                <h1 class="display-4">
                    <span class="from-location">@Model.FromLocation</span>
                    <i class="fas fa-plane mx-3"></i>
                    <span class="to-location">@Model.ToLocation</span>
                </h1>
                <p class="flight-number">Flight #@Model.AircraftNumber</p>
            </div>
        </div>
    </div>

    <div class="container">
        <!-- Flight Summary Card -->
        <div class="card summary-card shadow-lg">
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <div class="flight-timings">
                            <div class="timing departure">
                                <div class="timing-label">Departure</div>
                                <div class="timing-value">@Model.DepartureTime.ToString("f")</div>
                            </div>
                            <div class="flight-duration">
                                <i class="fas fa-clock"></i>
                                @if (duration.Days > 0)
                                {
                                    @duration.Days <text>d </text>
                                }
                                @duration.Hours<text>h </text>
                                @duration.Minutes<text>m</text>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="flight-info">
                            <div class="info-item">
                                <span class="info-label">Aircraft:</span>
                                <span class="info-value">@Model.AircraftType</span>
                            </div>
                            <div class="info-item">
                                <span class="info-label">Pilot:</span>
                                <span class="info-value">@Model.PilotName</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Capacity Section -->
        <div class="capacity-section mt-4">
            <div class="row">
                <div class="col-md-6">
                    <div class="capacity-card">
                        <h4>Business Class</h4>
                        <div class="capacity-stats">
                            <span class="text-success">@businessConfirmed confirmed</span> |
                            <span class="text-warning">@(businessReserved - businessConfirmed) pending</span> |
                            <span class="text-muted">@(Model.BusinessClassCapacity - businessReserved) available</span>
                        </div>
                        <div class="progress mt-2">
                            <div class="progress-bar bg-success"
                                 style="width:@((businessConfirmed * 100) / Model.BusinessClassCapacity)%"
                                 title="Confirmed"></div>
                            <div class="progress-bar bg-warning"
                                 style="width:@(((businessReserved - businessConfirmed) * 100) / Model.BusinessClassCapacity)%"
                                 title="Pending confirmation"></div>
                            <div class="progress-bar bg-light"
                                 style="width:@(((Model.BusinessClassCapacity - businessReserved) * 100) / Model.BusinessClassCapacity)%"
                                 title="Available"></div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="capacity-card">
                        <h4>Economy Class</h4>
                        <div class="capacity-stats">
                            <span class="text-success">@standardConfirmed confirmed</span> |
                            <span class="text-warning">@(standardReserved - standardConfirmed) pending</span> |
                            <span class="text-muted">@((Model.PassengerCapacity - Model.BusinessClassCapacity) - standardReserved) available</span>
                        </div>
                        <div class="progress mt-2">
                            <div class="progress-bar bg-success"
                                 style="width:@((standardConfirmed * 100) / (Model.PassengerCapacity - Model.BusinessClassCapacity))%"
                                 title="Confirmed"></div>
                            <div class="progress-bar bg-warning"
                                 style="width:@(((standardReserved - standardConfirmed) * 100) / (Model.PassengerCapacity - Model.BusinessClassCapacity))%"
                                 title="Pending confirmation"></div>
                            <div class="progress-bar bg-light"
                                 style="width:@((((Model.PassengerCapacity - Model.BusinessClassCapacity) - standardReserved) * 100) / (Model.PassengerCapacity - Model.BusinessClassCapacity))%"
                                 title="Available"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Reservations Dropdown Section -->
        <div class="reservations-section mt-4">
            <div class="accordion" id="reservationsAccordion">
                <div class="accordion-item">
                    <h2 class="accordion-header" id="headingReservations">
                        <button class="accordion-button collapsed" type="button" id="toggleReservationsButton">
                            <i class="fas fa-users me-2"></i> Show Reservations (@Model.Reservations?.Count)
                        </button>
                    </h2>
                    <div id="collapseReservations" class="accordion-collapse collapse"
                         aria-labelledby="headingReservations" data-bs-parent="#reservationsAccordion">
                        <div class="accordion-body">
                            @if (Model.Reservations?.Any() == true)
                            {
                                <ul class="list-group">
                                    @foreach (var reservation in Model.Reservations)
                                    {
                                        var expiryTime = reservation.CreatedAt.AddHours(48);
                                        <li class="list-group-item d-flex justify-content-between align-items-center @(!reservation.IsConfirmed ? "bg-light" : "")">
                                            @if (reservation.IsConfirmed)
                                            {
                                                @if (isAdmin && reservation.ReservationUser != null)
                                                {
                                                    <a asp-controller="ReservationUsers" asp-action="Details" asp-route-id="@reservation.ReservationUser.Id">
                                                        @reservation.ReservationUser.UserName
                                                    </a>
                                                }
                                                else
                                                {
                                                    @reservation.ReservationUser?.UserName
                                                }
                                            }
                                            else
                                            {
                                                <span>@reservation.ReservationUser?.UserName</span>
                                            }

                                            <div class="d-flex align-items-center">
                                                @if (!reservation.IsConfirmed)
                                                {
                                                    <span class="badge bg-warning text-dark me-2 countdown-badge"
                                                          data-expiry="@expiryTime.ToString("O")">
                                                        <i class="fas fa-clock me-1"></i>
                                                        <span class="countdown-text"></span>
                                                    </span>
                                                }
                                                <span class="badge @(reservation.TicketType == TicketType.Business ? "bg-success" : "bg-primary")">
                                                    @reservation.TicketType
                                                </span>
                                            </div>
                                        </li>
                                    }
                                </ul>
                            }
                            else
                            {
                                <p class="text-muted">No reservations yet</p>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Action Buttons -->
        <div class="action-buttons mt-4">
            @if (isAdmin)
            {
                <a class="btn btn-danger me-2" asp-action="Delete" asp-route-id="@Model.Id">
                    <i class="fas fa-trash me-1"></i> Delete Flight
                </a>
                <a class="btn btn-primary me-2" asp-action="Edit" asp-route-id="@Model.Id">
                    <i class="fas fa-edit me-1"></i> Edit Flight
                </a>
                <!-- New Passengers Button -->
                <a class="btn btn-info me-2" asp-action="Passengers" asp-route-id="@Model.Id">
                    <i class="fas fa-users me-1"></i> Passengers
                </a>
            }
            <a class="btn btn-secondary" asp-action="Index">
                <i class="fas fa-arrow-left me-1"></i> Back to All Flights
            </a>
        </div>
    </div>
</div>

@section Styles {
    <style>
        /* Previous styles remain the same */

        .list-group-item.bg-light {
            background-color: #f8f9fa !important;
        }

        .countdown-badge {
            font-size: 0.8rem;
            padding: 0.35em 0.65em;
        }

        .expiring-soon {
            animation: pulse 1s infinite;
        }

        @@keyframes pulse {
            0% {
                opacity: 1;
            }

            50% {
                opacity: 0.5;
            }

            100% {
                opacity: 1;
            }
        }
    </style>
}

@section StyleLinks {
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" />
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize accordion toggle
            const toggleButton = document.getElementById('toggleReservationsButton');
            const collapseElement = document.getElementById('collapseReservations');

            let isCollapsed = true;
            toggleButton.addEventListener('click', function() {
                if (isCollapsed) {
                    collapseElement.style.display = 'block';
                    collapseElement.classList.add('show');
                    toggleButton.classList.remove('collapsed');
                    isCollapsed = false;
                    startCountdowns(); // Start countdowns when section is opened
                } else {
                    collapseElement.style.display = 'none';
                    collapseElement.classList.remove('show');
                    toggleButton.classList.add('collapsed');
                    isCollapsed = true;
                    stopCountdowns(); // Stop countdowns when section is closed
                }
            });

            // Countdown function using UTC time
            function updateCountdown(element) {
                const expiry = new Date(element.dataset.expiry);
                const now = new Date();
                const timeLeft = expiry - now;

                if (timeLeft <= 0) {
                    element.querySelector('.countdown-text').textContent = "Expired";
                    element.classList.add('bg-danger');
                    element.classList.remove('bg-warning', 'expiring-soon');
                    return false; // Stop updating
                }

                const hours = Math.floor(timeLeft / (1000 * 60 * 60));
                const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
                const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);

                element.querySelector('.countdown-text').textContent =
                    `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;

                // Visual feedback
                if (hours < 1) {
                    element.classList.add('expiring-soon');
                    if (minutes < 5) {
                        element.classList.add('bg-danger');
                        element.classList.remove('bg-warning');
                    }
                }

                return true;
            }

            function startCountdowns() {
                const countdownBadges = document.querySelectorAll('.countdown-badge');
                countdownBadges.forEach(badge => {
                    // Clear any existing interval
                    if (badge.dataset.intervalId) {
                        clearInterval(badge.dataset.intervalId);
                    }

                    // Initial update
                    updateCountdown(badge);

                    // Set up interval to update every second
                    const intervalId = setInterval(() => {
                        updateCountdown(badge);
                    }, 1000);

                    // Store interval ID on the element
                    badge.dataset.intervalId = intervalId;
                });
            }

            function stopCountdowns() {
                const countdownBadges = document.querySelectorAll('.countdown-badge');
                countdownBadges.forEach(badge => {
                    if (badge.dataset.intervalId) {
                        clearInterval(badge.dataset.intervalId);
                        delete badge.dataset.intervalId;
                    }
                });
            }

            // Start countdowns if section is already open
            if (!collapseElement.classList.contains('collapse')) {
                startCountdowns();
            }
        });
    </script>
}